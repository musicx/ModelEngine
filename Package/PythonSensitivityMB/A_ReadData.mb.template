/***************
edited by Eric Liu
This file is used as the template for reading initial dataset and save it as nn_sense.mbd in data sub-directory
input :
    input : dataset path
    delimiter : dataset delimiter
    bad : bad variable name
    key_pos : key variables position lines, to avoid reading them as numerical vars
    keep_vars : keep variables list
    pre : output file name prefix
***************/
import com.fairisaac.mb.scripting.data.BinningMissingValueMap

requires (heap:'2G') // Allocates RAM for running the script
String pathToData = './data/'
String datasetName = '{opt[pre]}' + 'nn_sense' // Name of MB datafile without the .mbd

String srcURI = "{opt[input]}"
String sinkURI = pathToData+datasetName+'_init.mbd'

new File('./data').mkdir()

// Import data 
Dataset ds = app.task.importData(
    in: srcURI,
    out: sinkURI,
    fileType: 'delimited',
    overwrite: true,
    calculateStats: false
) {{
    layout (
        varDelimiter: '{opt[delimiter]}', // '\007' or ','
        characterSet: 'US-ASCII',
        partialLayout: true
    ) {{
    // var( name : "transid", type : "string", position : ind, role : "recordID")
{opt[key_pos]}
    }}
}}.dataset

// Add default roles
//ds.getVariableInfos().each() {{
//    if (it.getName().toLowerCase() == 'opt[bad]')
//        it.getVariableRoles().add('target')
//{{opt[role_ids]}}
//    else if (it.getName().toLowerCase() == 'key')
//        it.getVariableRoles().add('recordID')
//    else
//        it.getVariableRoles().add('predictor')
//}}

// Categorize variables
app.data.categorize(ds, '{opt[bad]}')

// Add SetId
app.data.newPartitionColumn(ds, 'setid')
rand = new Random(1805)
ds.updateIterator().each {{
    if (rand.nextInt(100) > 30) {{
        it['setid'] = Partition.TRAIN.getId();
    }}
    else {{
        it['setid'] = Partition.TEST.getId();
    }}
}}

// Save to datafile
ds.save()

Dataset ds2 = app.data.open(source: sinkURI,
    vars: '{opt[keep_vars]} setid'
    ) {{
    //partition(sets: [70, 30])
}}

Dataset ds3 = app.task.copy(
    in:ds2,
    out:pathToData+datasetName+'.mbd',
    overwrite:true).dataset

//ds3.save()

// Print dataset info and sample to console
app.data.dump(in:ds3, contents:true)
