import com.fairisaac.mb.api.job.launch.LaunchedJob
import com.fairisaac.mb.common.data.base.BaseTable
import java.awt.Color 
/********************************************************************************
User input
********************************************************************************/
requires (heap:'10G') // Allocates RAM for running this script
String pathToData = '../data/'
String datasetName = 'dev_nn_r_f_setid_zscl' // Name of MB datafile without the .mbd
String targetVariable = 'ato_bad'
String targetLowStates = '0'
String targetLowScoreLabel = 'Good'
String targetHighStates = '1'
String targetHighScoreLabel = 'Bad'

//String inputVariables = '*_zscl *_MV*'
String inputVariables = '*_zscl'
String sampleWeight = null //'e.g. sampleWeight3'
String setidVariable = 'setid' //'e.g. trainTestEval'
int numConcurrentJobs = 1 // number of simultaneous training jobs
List numHiddenNodesToTry = [5]
List numHiddenLayersToTry = [1]
String prepareModelForReasonCodes = 'trainOnly' // trainOnly trainAndReasonCode

String myExclude=' '


/********************************************************************************
Create Directories
********************************************************************************/
new File('../scripts/properties').mkdir()  
new File('../scripts/models').mkdir()
new File('../scripts/reports').mkdir()

/********************************************************************************
Get Logs from Child Jobs
********************************************************************************/
app.settings.'mb.job.logChildOutput' = true

/********************************************************************************
Get a handle to the data and transform the target to {0,1}
********************************************************************************/
Dataset ds = app.data.open(in:pathToData+datasetName+'.mbd'){
    binaryTarget(
        vars: targetVariable+'=binaryTargetNN',
        low: targetLowStates,
        lowLabel: targetLowScoreLabel,
        high: targetHighStates,
        highLabel: targetHighScoreLabel,
        otherGroupLabel: 'Other')}
Dataset dstemp = app.data.create()
app.data.copy(in:ds,out:dstemp)
Dataset ds1 = app.data.open(in:dstemp,filter:app.filter.where('binaryTargetNN < 2.0'))
/********************************************************************************
Train model with all variables and optimize network architecture
********************************************************************************/
// Get lists of variables to include and exclude.
List allVariables = ds1.getDatasetInfo().getVariableNames()
List predictorVarInfos = ds1.getDatasetInfo().getVariableInfos(inputVariables)
List include = []
predictorVarInfos.each(){
    include += it.name}
String excludedVariables = (allVariables-include).join(' ') + myExclude
String includedVariables = include.join(' ')
app.logger.info(includedVariables)

Boolean is_more_500 = true
File f1 = new File('../scripts/reports/Sensitivity51.tbl')
if(f1.exists()){
		Table u1 = new BaseTable().load(f1)		
		int var_count = u1.getRowCount()
		app.table.toCSV(u1,'models/Sensitivity51'+'_' + var_count + '.csv')
		File toSave = new File('models/Sensitivity51'+'_' + var_count + '.tbl')
		toSave.delete()
		u1.save(toSave);
		if( var_count > 500){
			is_more_500 = true
			int start = var_count * 0.8
			for (j in start..var_count-1)
				myExclude = myExclude + " " + u1.getRow(j).get('name')
			}
		else
			is_more_500 = false	
		app.logger.info(myExclude)
	}
excludedVariables = (allVariables-include).join(' ') + myExclude


while (is_more_500){
		// Create the properties files
		String fileName
		List propertyFiles = []
		
		numHiddenNodesToTry.each(){nodes->
		    numHiddenLayersToTry.each(){layers->
		        fileName = '../scripts/properties/properties_'+nodes+layers+'.groovy'
		        ConfigObject properties = new ConfigObject()
		        properties.pathToData = pathToData
		        properties.datasetName = datasetName
		        properties.targetVariable = targetVariable
		        properties.targetLowStates = targetLowStates
		        properties.targetLowScoreLabel = targetLowScoreLabel
		        properties.targetHighStates = targetHighStates
		        properties.targetHighScoreLabel = targetHighScoreLabel
		        properties.sampleWeight = sampleWeight
		        properties.setidVariable = setidVariable
		        properties.numNodes = nodes
		        properties.numLayers = layers
		        properties.prepareModelForReasonCodes = prepareModelForReasonCodes
		        properties.excludedVariables = excludedVariables
		        properties.includedVariables = includedVariables
		        new File(fileName).withWriter{writer->properties.writeTo(writer)}
		        propertyFiles.add(fileName)
		    }
		}
		// Launch the jobs numConcurrentJobs at a time
	
		String propFile = ''
		while (propertyFiles.size()>0){
		    for (i in 0..numConcurrentJobs-1) {
		        propFile = propertyFiles.pop()
		        LaunchedJob job1 = app.job.submit(script:'D_TrainWorker.mb',arguments:['-DPropFile='+propFile])
		    }
		    // Wait for the jobs to finish.
		    app.job.waitForChildren()
		}       
		
		
		f1 = new File('../scripts/reports/Sensitivity51.tbl')
		u1 = new BaseTable().load(f1)		
		var_count = u1.getRowCount()
		app.table.toCSV(u1,'models/Sensitivity51'+ '_' + var_count + '.csv')
		toSave = new File('models/Sensitivity51'+'_' + var_count + '.tbl')
		toSave.delete()
		u1.save(toSave);
		if( var_count > 500){
			is_more_500 = true
			int start = var_count * 0.8
			for (j in start..var_count-1)
				myExclude = myExclude + " " + u1.getRow(j).get('name')
			}
		else
			is_more_500 = false
		 
		
		excludedVariables = (allVariables-include).join(' ') + myExclude			        
			       // Plot sensititivity results
		numHiddenNodesToTry.each(){nodes->
		    numHiddenLayersToTry.each(){layers->
		                //String tablePathAndFile = '../scripts/models/Sensitivity'+nodes+layers+'.tbl'
		                //String outputPathAndFile = '../scripts/reports/SensitivityPlot'+nodes+layers+'.html'
		                //U_PlotSensitivity.run(tablePathAndFile,outputPathAndFile)
		    }
		}	
	} 

