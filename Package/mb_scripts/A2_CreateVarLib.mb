import com.fairisaac.mb.common.data.base.BaseTable
/********************************************************************************
User input --- test
********************************************************************************/
requires (heap:'40G') // Allocates RAM for running the script
String pathToData = '../data/'
String datasetName = 'dev_nn_r_f_setid' // Name of MB datafile without the .mbd
String pathToHoldLibrary = './variableLibrary'
String replaceNumericMissingsWith = 'mean' // 'mean' 'median' 'min' 'max'

/********************************************************************************
### You should not need to edit anything below here ###
********************************************************************************/
File f1 = new File('../reports/NumericScalingStats.tbl')
Table u1 = new BaseTable().load(f1)
filter1 = app.filter.recs(1000)
Dataset ds1 = app.data.open(in:pathToData+datasetName+'.mbd')//, filter:filter1  )

/********************************************************************************
Get lists of predictor variables that are numeric and categorical
********************************************************************************/
List numericVarInfos = ds1.getDatasetInfo().getVariableInfos('@n(*)')
List numericPredictors = []
numericVarInfos.each() {
    if(it.getVariableRoles().contains('predictor')) {
        numericPredictors += it.name }
}

/********************************************************************************
Create variable library to contain transformation logic for missing and dummies
********************************************************************************/
// Create a script to access the library through a web page RMA.
def f = new File('NNVariables.mb')
f.write('''/** 
 * Created by SRL Variable Library Wizard
 * on Wed Sep 07 10:54:36 CDT 2011
 *
 * NOTE: Changes to this file may be lost or cause the editor to fail.
 */
varLib = app.varlib.getLibrary(lib: "SRL", repository: "./variableLibrary", project: "NNVariables")''')

varLib = app.varlib.createLibrary(
    lib: 'SRL',
    repository: pathToHoldLibrary, 
    project: 'NNVariables',
    objectModel: ds1)

// Get a list of the missing values for each numeric variable.
Map missingStatesForNumerics = [:]

ds1.each(){r->
    numericPredictors.each(){v->
        List l = missingStatesForNumerics.get(v)
        if(l == null) l = []
        if(MV.isMissing(r[v]) && (l.size==0 | !l.contains(r[v]))) {
            l.add(r[v])
            missingStatesForNumerics.put(v,l)
        }
    }
}
println missingStatesForNumerics

// Add a utility function to create a dummy binary indicator variable
/******
name = 'createMvDummy'
type = 'real'
description = 'Create a dummy binary indicator variable'
paramNames = ['value','state'] // List of parameter names 
paramTypes = ['real','real'] // List of utility parameter types
code = '''
    v is a real initially 0.
    if ( value = state ) then {v = 1.}
    return v.
        '''
varLib.addUtility(name, type, description, paramNames, paramTypes, code, true) 

// For each numeric predictor, define dummy variables for MVs
missingStatesForNumerics.each(){v,s->
    s.each(){state->
        m1 = [
            name:v+'_'+state,
            type:'real',
            role:'Predictive Input',   // default is 'Predictive Input'
            status:'In Progress',      // default is 'In Progress'
            description:'Binary dummy = 1 when '+v+' = '+state,
            code:v+'_'+state+' = createMvDummy(input.'+v+',MV.'+state+').']
        varLib.addVar(m1, true)
    }
}
***********/

/********************************************************************************
Normalization of input variables
********************************************************************************/
name = 'normalizeVariable'
type = 'real'
description = 'Create a normalized variable'
paramNames = ['value', 'replacement', 'mean', 'stdev'] 
paramTypes = ['real', 'real', 'real', 'real']
code =  '''
    v is a real initially value.
    z is a real initially 0.
    if ( isMissing(v) = true ) then v = replacement.
    z = (v - mean) / stdev.
    return z.
         '''
varLib.addUtility(name, type, description, paramNames, paramTypes, code, true)
// For each non-binary numeric predictor, apply normalization
numericPredictors.each(){ 
    newValue = u1.getRow([it]).get(replaceNumericMissingsWith)
    mean = u1.getRow([it]).get('mean')
    stdev = u1.getRow([it]).get('stddev')
    if(!MV.isMissing(stdev) && stdev > 0) {
    m1 = [
        name:it+'_zscl',
        type:'real',
        role:'Predictive Input',   // default is 'Predictive Input'
        status:'In Progress',      // default is 'In Progress'
        description:it+' with missing values replaced by '+replaceNumericMissingsWith+'='+newValue+' and normalized using [mean '+mean+', stdev '+stdev+']',
        code:it+'_zscl = normalizeVariable(input.'+it+','+newValue+','+mean+','+stdev+').']
        varLib.addVar(m1, true)
    }
}
 
/********************************************************************************
Query library to see what is in there now
********************************************************************************/
def info = varLib.getVariableLibraryInfo()
String summary = """Variable Library Provider Info:
  URI: ${info.getURI()}
  Name: ${info.getName()}
  Author: ${info.getAuthor()}
  Version: ${info.getLibraryVersion()}
  Description: ${info.getDescription()}
  Input Variables: ${info.getInputVariableSummary().toString()}
  Generated Variables: ${info.getGeneratedVariableSummary().toString()}
"""
app.logger.info( summary )
/********************************************************************************
********************************************************************************/

