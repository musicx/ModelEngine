import com.fairisaac.mb.common.data.base.BaseTable
/********************************************************************************
User input 
********************************************************************************/
requires (heap:'20G') // Allocates RAM for running the script
String pathToData = '../data/'
String datasetName = 'dev_nn_r_f_setid' // Name of MB datafile without the .mbd
int batchSize = 50 // Number of variables to process at a time
String targetVariable = 'ato_bad'
String targetLowStates = '0'
String targetLowScoreLabel = 'Good'
String targetHighStates = '1'
String targetHighScoreLabel = 'Bad'
String setidVariable = 'setid'//'e.g. trainTestEval'

/********************************************************************************
### You should not need to edit anything below here ###
********************************************************************************/
/********************************************************************************
Get a handle to the data
********************************************************************************/
Dataset ds = app.data.open(in:pathToData+datasetName+'.mbd'){
    binaryTarget(
        vars: targetVariable+'=binaryTargetNN',
        low: targetLowStates,
        lowLabel: targetLowScoreLabel,
        high: targetHighStates,
        highLabel: targetHighScoreLabel,
        otherGroupLabel: 'Other')}
Dataset dstemp = app.data.create()
app.data.copy(in:ds,out:dstemp)
Dataset ds1 = app.data.create()
if (setidVariable == null) ds1=app.data.open(in:dstemp,filter:app.filter.where('binaryTargetNN < 2.0'))
else ds1=app.data.open(in:dstemp,filter:app.filter.where(''+setidVariable+' == 1 && binaryTargetNN < 2.0'))

/********************************************************************************
Get lists of predictor variables that are numeric and categorical
********************************************************************************/
List numericVarInfos = ds1.getDatasetInfo().getVariableInfos('@n(*)')
List numericPredictors = []
numericVarInfos.each() {
    if(it.getVariableRoles().contains('predictor')) {
        numericPredictors += it.name }
}

List numericPredictorGroups = splitList(numericPredictors,batchSize)

/********************************************************************************
Helper function to take list and return list of smaller lists
********************************************************************************/
List splitList(List list, int groupSize){
    int low = 0
    int high = groupSize-1
    boolean finished = false
    List ofLists = []
    while (!finished){
        ofLists.add(list.getAt([low..high]))
        low+=groupSize
        high+=groupSize
        if (high>=list.size-1) finished = true
    }
    ofLists.add(list.getAt([low..list.size-1]))
    return ofLists
}

/********************************************************************************
Compute statistics for input capping and scaling
********************************************************************************/
List uniTables = []
numericPredictorGroups.each(){n->
    TaskResult uniR = app.task.stats(in:ds1){
        uni(
            vars: n.join(' '),
            //stats:'mean median stddev min max',
            stats:'mean stddev min max',
            table:'u1')}
    uniTables.add(uniR.u1)
}

Table uniTable = appendTables(uniTables)

/********************************************************************************
Helper function to concatenate a list of tables
********************************************************************************/
Table appendTables(List l) {
    Table tt3 = new BaseTable()
    l.each(){Table currentTable->
        tt3.addAll(currentTable)
    }
    return tt3
}

new File('../reports').mkdir()  
File f1 = new File('../reports/NumericScalingStats.tbl')
f1.delete()
uniTable.save(f1)
Table t=new BaseTable().load(f1)
app.table.toCSV(t,'../reports/NumericScalingStats.csv')
    
